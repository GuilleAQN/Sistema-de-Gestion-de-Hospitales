@using Sistema_de_Gestion_de_Hospitales.FrontEnd.Interfaces
@using System.ComponentModel.DataAnnotations
@using Sistema_de_Gestion_de_Hospitales.Shared
@using MudBlazor

@inject ISnackbar Snackbar
@inject ITratamientosService TratamientosService
@inject IDoctoresService DoctoresService
@inject IDiagnosticosService DiagnosticosService
@inject IDialogService DialogService

<PageTitle>Insertando Tratamiento</PageTitle>

<EditForm Model="@Model" OnValidSubmit="CrearNuevoTratamiento">
<MudDialog>
    <DialogContent>
        <DataAnnotationsValidator />
        <ValidationSummary />
        <MudTextField T="string" Label="Descripción" AutoGrow Lines="3" @bind-Value="Model.Descripcion" Required="true" />
            <MudDatePicker PickerVariant="PickerVariant.Dialog" @bind-Date="@fechaInicio" Label="Fecha de Inicio" Required="true" />
            <MudDatePicker PickerVariant="PickerVariant.Dialog" @bind-Date="@fechaFin" Label="Fecha de Finalización" Required="true" />
            <MudSelect T="int" Label="Diagnóstico" @bind-Value="@Model.IdDiagnostico" HelperText="@diagnosticosText" ToStringFunc="@((int id) => diagnosticos.FirstOrDefault(d => d.IdDiagnostico == id)?.Descripcion)">
                @if (diagnosticos != null)
                
                    @foreach (var diagnostico in diagnosticos)
                    {
                        <MudSelectItem T="int" Value="diagnostico.IdDiagnostico">@diagnostico.Descripcion</MudSelectItem>
                    }
                }
            </MudSelect>
            <MudSelect T="int" Label="Doctor" @bind-Value="@Model.IdDoctor" HelperText="@doctoresText" ToStringFunc="@((int id) => doctores.FirstOrDefault(d => d.IdDoctor == id)?.NombreCompleto)">
                @if (doctores != null)
                {
                    @foreach (var doctor in doctores)
                    {
                        <MudSelectItem T="int" Value="doctor.IdDoctor">@doctor.NombreCompleto</MudSelectItem>
                    }
                }
            </MudSelect>
    </DialogContent>
    <DialogActions>
       <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Crear</MudButton>
       <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="CancelarCreacion">Cancelar</MudButton>
    </DialogActions>
</MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter] 
    public TratamientoInsertDTO Model { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private TratamientoInsertDTO nuevoTratamiento = new TratamientoInsertDTO();

    private DateTime? fechaInicio = DateTime.Now;
    private DateTime? fechaFin = DateTime.Now.AddDays(5);

    private IEnumerable<DiagnosticoGetDTO> diagnosticos;
    private IEnumerable<DoctorGetDTO> doctores;

    private string doctoresText { get; set; } = "Cargando doctores...";
    private string diagnosticosText { get; set; } = "Cargando diagnósticos...";

    protected override async Task OnInitializedAsync()
    {
        Model.FechaInicio = DateOnly.FromDateTime(fechaInicio.Value);
        Model.FechaFin = DateOnly.FromDateTime(fechaFin.Value);
        diagnosticos = await CargarDiagnosticosAsync();
        doctores = await CargarDoctoresAsync();
        doctoresText = doctores.Any() ? string.Empty : "No se encontraron doctores.";
        diagnosticosText = diagnosticos.Any() ? string.Empty : "No se encontraron diagnosticos.";
    }

    private async Task<IEnumerable<DiagnosticoGetDTO>> CargarDiagnosticosAsync()
    {
        return await DiagnosticosService.GetDiagnosticos();
    }

    private async Task<IEnumerable<DoctorGetDTO>> CargarDoctoresAsync()
    {
        return await DoctoresService.GetDoctores();
    }

    protected override void OnParametersSet()
    {
        nuevoTratamiento = Model;
    }

    private async Task CrearNuevoTratamiento()
    {
        nuevoTratamiento.FechaInicio = DateOnly.FromDateTime(fechaInicio.Value);
        nuevoTratamiento.FechaFin = DateOnly.FromDateTime(fechaFin.Value);
        var success = await TratamientosService.CreateTratamiento(nuevoTratamiento);
        if (success.IsSuccessStatusCode)
        {
            await OnClose.InvokeAsync(null);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            var problemDetails = await success.Content.ReadFromJsonAsync<ProblemDetailsFront>();
            if (problemDetails != null)
            {
                await DialogService.ShowMessageBox("Error", problemDetails.Detail ?? "Error crear el nuevo tratamiento.");
            }
        }
    }

    private void CancelarCreacion()
    {
        MudDialog.Cancel();
    }
}
