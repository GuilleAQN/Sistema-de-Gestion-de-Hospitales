@page "/tratamiento"

@using Sistema_de_Gestion_de_Hospitales.FrontEnd.Interfaces
@using Sistema_de_Gestion_de_Hospitales.Shared
@using MudBlazor

@inject ITratamientosService TratamientosService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Tratamientos</PageTitle>
<MudText Typo="Typo.h6" GutterBottom="true">Tratamientos</MudText>

<MudContainer MaxWidth="MaxWidth.Large" Style="margin-top: 20px;">
    <MudPaper>
        @if (_isLoading)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
        }
        else if (tratamientos != null && tratamientos.Any())
        {
            <MudGrid Container="true" Justify="Justify.SpaceBetween" Class="ml-2" Spacing="3">
                <MudItem xs="8">
                    <MudButton Class="mb-4" Variant="Variant.Filled" DropShadow="false" Color="Color.Primary" @onclick="AbrirFormularioInsercion">Agregar Nuevo Habitacion</MudButton>
                </MudItem>
            </MudGrid>
            <MudDataGrid T="TratamientoGetDTO" MultiSelection="true" Items="@tratamientos" Hover="true" Dense="true" Filterable="true" Sortable="true">
                <Columns>
                    <SelectColumn T="TratamientoGetDTO" Hidden />
                    <PropertyColumn Property="x => x.IdTratamiento" Title="ID" />
                    <PropertyColumn Property="x => x.NombreDoctor" Title="Doctor" />
                    <PropertyColumn Property="x => x.FechaInicio" Title="Fecha de Inicio" />
                    <PropertyColumn Property="x => x.FechaFin" Title="Fecha de Terminación" />
                    <TemplateColumn>
                        <CellTemplate>
                            <MudStack Row>
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Medium" @onclick="() => EditTratamiento(context.Item)"></MudIconButton>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" Size="Size.Medium" @onclick="() => DeleteTratamiento(context.Item)"></MudIconButton>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="TratamientoGetDTO" PageSizeOptions="[5,10,15]" />
                </PagerContent>
            </MudDataGrid>
            <style>
                .dialog-show {
                    backdrop-filter: blur(10px);
                }
            </style>
        }
        else
        {
            <MudGrid Container="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Spacing="2">
                <MudItem>
                    <MudText Typo="Typo.subtitle1" Align="Align.Center">No se encontro ningún resultado.</MudText>
                        <MudButton Class="mb-4" Variant="Variant.Filled" DropShadow="false" Color="Color.Primary" @onclick="AbrirFormularioInsercion">Agregar Nuevo Habitacion</MudButton>
                </MudItem>
            </MudGrid>
        }
    </MudPaper>
</MudContainer>

@code {
    private IEnumerable<TratamientoGetDTO>? tratamientos  = null;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await CargarTratamientos();
    }

    private async Task CargarTratamientos()
    {
        try
        {
            tratamientos  = await TratamientosService.GetTratamientos();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar los tratamientos: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            await InvokeAsync(StateHasChanged); 
        }
    }

    private async Task AbrirFormularioInsercion()
    {   
        var parameters = new DialogParameters { { "Model", new TratamientoInsertDTO() } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, BackgroundClass = "dialog-show" };
        parameters.Add("OnClose", EventCallback.Factory.Create(this, OnDialogClose));

        var result = await DialogService.ShowAsync<InsertTratamiento>("Nuevo Tratamiento", parameters, options);
        if (await result.Result == DialogResult.Ok(true))
        {
            OnDialogClose();
        }
    }

    private async Task EditTratamiento(TratamientoGetDTO tratamiento)
    {
        var parameters = new DialogParameters { { "Model", tratamiento } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, BackgroundClass = "dialog-show" };
        parameters.Add("OnClose", EventCallback.Factory.Create(this, OnDialogClose));

        var dialog = await DialogService.ShowAsync<UpdateTratamiento>("Actualizar Tratamiento", parameters, options);
        var result = dialog.Result;

        if (!result.IsCanceled)
        {
            OnDialogClose();
        }
    }

    private async Task DeleteTratamiento(TratamientoGetDTO tratamiento)
    {
        bool? confirmed = await DialogService.ShowMessageBox(
            "Confirmar",
            $"¿Estás seguro de que deseas eliminar el tratamiento {tratamiento.IdTratamiento}?",
            yesText: "Eliminar", cancelText: "Cancelar");

        if (confirmed == true)
        {
            var success = await TratamientosService.DeleteTratamiento(tratamiento.IdTratamiento);
            if (success)
            {
                OnDialogClose();
            }
            else
            {
                await DialogService.ShowMessageBox("Error", "No se pudo eliminar el tratamiento.");
            }
        }
    }

    private async void OnDialogClose()
    {
        await CargarTratamientos();
    }
}
