@using Sistema_de_Gestion_de_Hospitales.FrontEnd.Interfaces
@using System.ComponentModel.DataAnnotations
@using Sistema_de_Gestion_de_Hospitales.Shared
@using MudBlazor

@inject ISnackbar Snackbar
@inject IDiagnosticosService DiagnosticosService
@inject IPacientesService PacientesService
@inject IDoctoresService DoctoresService
@inject IDialogService DialogService

<PageTitle>Editando Diagnóstico</PageTitle>

<EditForm Model="@Model" OnValidSubmit="ActualizarDiagnostico">
    <MudDialog>
        <DialogContent>
            <DataAnnotationsValidator />
            <ValidationSummary />
            <MudSelect T="int" Label="Doctor" @bind-Value="@Model.IdDoctor" HelperText="@doctoresText" ToStringFunc="@((int id) => doctores.FirstOrDefault(d => d.IdDoctor == id)?.NombreCompleto)">
                @if (doctores != null)
                {
                    @foreach (var doctor in doctores)
                    {
                        <MudSelectItem T="int" Value="doctor.IdDoctor">@doctor.NombreCompleto</MudSelectItem>
                    }
                }
            </MudSelect>
            <MudSelect Label="Pacientes" @bind-Value="@Model.IdPaciente" HelperText="@pacientesText" ToStringFunc="@((int id) => pacientes.FirstOrDefault(d => d.IdPaciente == id)?.NombreCompleto)">
                @if (pacientes != null)
                {
                    @foreach (var paciente in pacientes)
                    {
                        <MudSelectItem T="int" Value="paciente.IdPaciente">@paciente.NombreCompleto</MudSelectItem>
                    }
                }
            </MudSelect>
            <MudDatePicker PickerVariant="PickerVariant.Dialog" @bind-Date="@fecha" Label="Fecha Agendada" />
            <MudTextField T="string" Label="Descripción" AutoGrow Lines="3" @bind-Value="Model.Descripcion" Required="true" />
        </DialogContent>
        <DialogActions>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save">Crear</MudButton>
            <MudButton Color="Color.Secondary" OnClick="Cancelar">Cancelar</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public DiagnosticoGetDTO Model { get; set; }

    [Parameter] public EventCallback OnClose { get; set; }

    private DateTime? fecha;

    private IEnumerable<PacienteGetDTO> pacientes;
    private IEnumerable<DoctorGetDTO> doctores;

    private string doctoresText { get; set; } = "Cargando doctores...";
    private string pacientesText { get; set; } = "Cargando pacientes...";

    protected override async Task OnInitializedAsync()
    {
        fecha = Model.Fecha.ToDateTime(TimeOnly.Parse("12:00 PM"));
        pacientes = await CargarPacientesAsync();
        doctores = await CargarDoctoresAsync();
        doctoresText = doctores.Any() ? string.Empty : "No se encontraron doctores.";
        pacientesText = pacientes.Any() ? string.Empty : "No se encontraron pacientes.";
    }

    private async Task<IEnumerable<PacienteGetDTO>> CargarPacientesAsync()
    {
        return await PacientesService.GetPacientes();
    }

    private async Task<IEnumerable<DoctorGetDTO>> CargarDoctoresAsync()
    {
        return await DoctoresService.GetDoctores();
    }

    private async Task ActualizarDiagnostico()
    {
        var dto = new DiagnosticoUpdateDTO();
        Model.CopyPropertiesTo(dto);
        dto.Fecha= DateOnly.FromDateTime(fecha.Value);
        try
        {
            var success = await DiagnosticosService.UpdateDiagnostico(Model.IdDiagnostico, dto);
            if (success.IsSuccessStatusCode)
            {
                Snackbar.Add("Diagnóstico actualizado exitosamente", Severity.Success);
                await OnClose.InvokeAsync(null);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                var problemDetails = await success.Content.ReadFromJsonAsync<ProblemDetailsFront>();
                if (problemDetails != null)
                {
                    await DialogService.ShowMessageBox("Error", problemDetails.Detail ?? "Error al actualizar el diagnóstico");
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private void Cancelar()
    {
        MudDialog.Cancel();
    }
}
