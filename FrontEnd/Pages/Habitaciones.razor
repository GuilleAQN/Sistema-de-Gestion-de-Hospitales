@page "/habitaciones"

@using Sistema_de_Gestion_de_Hospitales.FrontEnd.Interfaces
@using Sistema_de_Gestion_de_Hospitales.Shared
@using MudBlazor

@inject IHabitacionesService HabitacionesService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Habitaciones</PageTitle>
<MudText Typo="Typo.h6" GutterBottom="true">Habitaciones</MudText>

<MudContainer MaxWidth="MaxWidth.Large" Style="margin-top: 20px;">
    <MudPaper>
        @if (_isLoading)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
        }
        else if (habitaciones != null && habitaciones.Any())
        {
            <MudGrid Container="true" Justify="Justify.SpaceBetween" Class="ml-2" Spacing="3">
                <MudItem xs="8">
                    <MudButton Class="mb-4" Variant="Variant.Filled" DropShadow="false" Color="Color.Primary" @onclick="AbrirFormularioInsercion">Agregar Nueva Habitación</MudButton>
                </MudItem>
            </MudGrid>
            <MudDataGrid T="HabitacionGetDTO" MultiSelection="true" Items="@habitaciones" Hover="true" Dense="true" Filterable="true" Sortable="true">
                <Columns>
                    <SelectColumn T="HabitacionGetDTO" Hidden />
                    <PropertyColumn Property="x => x.IdHabitacion" Title="ID" />
                    <PropertyColumn Property="x => x.Piso" Title="Piso" />
                    <PropertyColumn Property="x => x.Numero" Title="Número" />
                    <PropertyColumn Property="x => x.Tipo" Title="Tipo" />
                    <TemplateColumn>
                        <CellTemplate>
                            <MudStack Row>
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Medium" @onclick="() => EditHabitacion(context.Item)"></MudIconButton>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" Size="Size.Medium" @onclick="() => DeleteHabitacion(context.Item)"></MudIconButton>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="HabitacionGetDTO" PageSizeOptions="[5,10,15]" />
                </PagerContent>
            </MudDataGrid>
            <style>
                .dialog-show {
                    backdrop-filter: blur(10px);
                }
            </style>
        }
        else
        {
            <MudGrid Container="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Spacing="2">
                <MudItem>
                    <MudText Typo="Typo.subtitle1" Align="Align.Center">No se encontro ningún resultado.</MudText>
                    <MudButton Class="mb-4" Variant="Variant.Filled" DropShadow="false" Color="Color.Primary" @onclick="AbrirFormularioInsercion">Agregar Nueva Habitación</MudButton>
                </MudItem>
            </MudGrid>
        }
    </MudPaper>
</MudContainer>

@code {
    private IEnumerable<HabitacionGetDTO>? habitaciones  = null;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await CargarHabitaciones();
    }

    private async Task CargarHabitaciones()
    {
        try
        {
            habitaciones  = await HabitacionesService.GetHabitaciones();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar las habitaciones: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            await InvokeAsync(StateHasChanged); 
        }
    }

    private async Task AbrirFormularioInsercion()
    {   
        var parameters = new DialogParameters { { "Model", new HabitacionInsertDTO() } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, BackgroundClass = "dialog-show" };
        parameters.Add("OnClose", EventCallback.Factory.Create(this, OnDialogClose));

        var result = await DialogService.ShowAsync<InsertHabitacion>("Nueva Habitacion", parameters, options);
        if (await result.Result == DialogResult.Ok(true))
        {
            OnDialogClose();
        }
    }

    private async Task EditHabitacion(HabitacionGetDTO habitacion)
    {
        var parameters = new DialogParameters { { "Model", habitacion } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, BackgroundClass = "dialog-show" };
        parameters.Add("OnClose", EventCallback.Factory.Create(this, OnDialogClose));

        var dialog = await DialogService.ShowAsync<UpdateHabitacion>("Actualizar Habitacion", parameters, options);
        var result = dialog.Result;

        if (!result.IsCanceled)
        {
           OnDialogClose();
        }
    }

    private async Task DeleteHabitacion(HabitacionGetDTO habitacion)
    {
        bool? confirmed = await DialogService.ShowMessageBox(
            "Confirmar",
            $"¿Estás seguro de que deseas eliminar la habitación {habitacion.Numero}?",
            yesText: "Eliminar", cancelText: "Cancelar");

        if (confirmed == true)
        {
            var success = await HabitacionesService.DeleteHabitacion(habitacion.IdHabitacion);
            if (success)
            {
                OnDialogClose();
            }
            else
            {
                await DialogService.ShowMessageBox("Error", "No se pudo eliminar la habitacion.");
            }
        }
    }

    private async void OnDialogClose()
    {
        await CargarHabitaciones();
    }
}
