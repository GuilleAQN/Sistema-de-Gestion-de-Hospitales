@using Sistema_de_Gestion_de_Hospitales.FrontEnd.Interfaces
@using Sistema_de_Gestion_de_Hospitales.Shared
@using Sistema_de_Gestion_de_Hospitales.Shared.Cita
@using MudBlazor

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ICitasService CitasService
@inject IDoctoresService DoctoresService
@inject IPacientesService PacientesService
@inject ICategoriasCitasService CategoriasCitasService
@inject IEnfermerasService EnfermerasService

<PageTitle>Editando Cita</PageTitle>

<EditForm Model="@Model" OnValidSubmit="ActualizarCita">
<MudDialog>
    <DialogContent>
        <MudTextField T="string" Label="Nombre" @bind-Value="Model.Descripción" Required="true" />
        <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Fecha Agendada" @bind-Date="Model.Fecha"/>
            <MudSelect T="int?" Label="Doctor" @bind-Value="@Model.IdDoctor" HelperText="@doctoresText" ToStringFunc="@((int? id) => doctores.FirstOrDefault(d => d.IdDoctor == id)?.NombreCompleto ?? "Sin Doctor")">
                @if (doctores != null)
                {
                    @foreach (var doctor in doctores)
                    {
                        <MudSelectItem T="int?" Value="doctor.IdDoctor">@doctor.NombreCompleto</MudSelectItem>
                    }
                }
            </MudSelect>
            <MudSelect T="int?" Label="Enfermera" @bind-Value="@Model.IdEnfermera" HelperText="@enfermerasText" ToStringFunc="@((int? id) => enfermeras.FirstOrDefault(d => d.IdEnfermera == id)?.NombreCompleto ?? "Sin Enfermera")">
                @if (enfermeras != null)
                {
                    @foreach (var enfermera in enfermeras)
                    {
                        <MudSelectItem T="int?" Value="enfermera.IdEnfermera">@enfermera.NombreCompleto</MudSelectItem>
                    }
                }
            </MudSelect>
            <MudSelect T="int?" Label="Pacientes" @bind-Value="@Model.IdPaciente" HelperText="@pacientesText" ToStringFunc="@((int? id) => pacientes.FirstOrDefault(d => d.IdPaciente == id)?.NombreCompleto ?? "Sin Paciente")">
                @if (pacientes != null)
                {
                    @foreach (var paciente in pacientes)
                    {
                        <MudSelectItem T="int?" Value="paciente.IdPaciente">@paciente.NombreCompleto</MudSelectItem>
                    }
                }
            </MudSelect>
            <MudSelect T="int?" Label="Categoria" @bind-Value="@Model.IdCategoriaCita" HelperText="@categoriasText" ToStringFunc="@((int? id) => categoriaCitas.FirstOrDefault(d => d.IdCategoriaCita == id)?.Nombre ?? "Sin Categoria")">
                @if (categoriaCitas != null)
                {
                    @foreach (var categoriaCita in categoriaCitas)
                    {
                        <MudSelectItem T="int?" Value="categoriaCita.IdCategoriaCita">@categoriaCita.Nombre</MudSelectItem>
                    }
                }
            </MudSelect>
        </DialogContent>
    <DialogActions>
        <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save">Actualizar</MudButton>
        <MudButton Color="Color.Secondary" OnClick="Cancelar">Cancelar</MudButton>
    </DialogActions>
</MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Parameter] public CitaGetDTO Model { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private IEnumerable<DoctorGetDTO>? doctores = null;
    private IEnumerable<PacienteGetDTO>? pacientes = null;
    private IEnumerable<EnfermeraGetDTO>? enfermeras = null;
    private IEnumerable<CategoriaCitaGetDTO>? categoriaCitas = null;

    private string doctoresText { get; set; } = "Cargando doctores...";
    private string enfermerasText { get; set; } = "Cargando enfermeras...";
    private string categoriasText { get; set; } = "Cargando categorias...";
    private string pacientesText { get; set; } = "Cargando pacientes...";


    protected override async Task OnInitializedAsync()
    {
        doctores = await DoctoresService.GetDoctores();
        pacientes = await PacientesService.GetPacientes();
        enfermeras = await EnfermerasService.GetEnfermeras();
        categoriaCitas = await CategoriasCitasService.GetCategoriasCitasAsync();

        doctoresText = doctores.Any() ? string.Empty : "No se encontraron doctores.";
        enfermerasText = enfermeras.Any() ? string.Empty : "No se encontraron enfermeras.";
        categoriasText = categoriaCitas.Any() ? string.Empty : "No se encontraron categorias.";
        pacientesText = pacientes.Any() ? string.Empty : "No se encontraron pacientes.";

        Model.IdDoctor = (Model.IdDoctor == null) ? 0 : Model.IdDoctor;
        Model.IdEnfermera = (Model.IdEnfermera == null) ? 0 : Model.IdEnfermera;
        Model.IdPaciente = (Model.IdPaciente == null) ? 0 : Model.IdPaciente;
        Model.IdCategoriaCita = (Model.IdCategoriaCita == null) ? 0 : Model.IdCategoriaCita;
    }
    

    private async Task ActualizarCita()
    {
        var dto = new CitaUpdateDTO();
        Model.CopyPropertiesTo(dto); 

        try
        {
            var success = await CitasService.UpdateCita(Model.IdCita, dto);
            if (success.IsSuccessStatusCode)
            {
                Snackbar.Add("Cita actualizada exitosamente", Severity.Success);
                await OnClose.InvokeAsync(null);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                var problemDetails = await success.Content.ReadFromJsonAsync<ProblemDetailsFront>();
                if (problemDetails != null)
                {
                    await DialogService.ShowMessageBox("Error", problemDetails.Detail ?? "Error al actualizar la cita");
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private void Cancelar()
    {
        MudDialog.Cancel();
    }
}
